{"version":3,"sources":["styles/navBar.tsx","components/NavBar.tsx","styles/tablePagination.tsx","components/PaginationActions.tsx","services/apiService.tsx","utils/saveCsv.tsx","styles/tableStyles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["navBar","makeStyles","theme","root","marginLeft","marginRight","button","margin","backgroundColor","palette","success","main","onRight","textAlign","onLeft","display","justifyContent","NavBar","clickButton","classes","className","Grid","container","item","xs","Button","onClick","variant","color","startIcon","tablePagination","flexShrink","spacing","PaginationActions","count","onChangePage","page","rowsPerPage","useTheme","IconButton","e","disabled","aria-label","direction","Math","ceil","max","getAll","a","axios","get","req","data","saveCsv","rows","csvContent","map","row","rowStr","timestamp","email","toString","utm_source","utm_medium","utm_term","utm_campaign","utm_content","join","tableStyles","width","table","minWidth","headerContainer","info","header","fontWeight","common","white","StyledTableRow","withStyles","action","hover","TableRow","App","useState","setRows","setPage","setRowsPerPage","emptyRows","min","length","useEffect","apiService","then","element","document","createElement","file","Blob","type","href","window","URL","createObjectURL","download","body","appendChild","click","TableContainer","component","Paper","Table","TableHead","TableCell","align","TableBody","slice","id","scope","style","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","label","value","SelectProps","inputProps","native","_e","onChangeRowsPerPage","Number","target","ActionsComponent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3be869aa.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\n\nexport const navBar = makeStyles((theme) => ({\n  root: {\n    marginLeft: '5vw',\n    marginRight: '5vw',\n  },\n  button: {\n    margin: '1.2em',\n    backgroundColor: theme.palette.success.main,\n  },\n  onRight: {\n    textAlign: 'center',\n  },\n  onLeft: {\n    display: 'flex',\n    justifyContent: 'flex-end',\n  },\n}));\n","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport SaveIcon from '@material-ui/icons/Save';\nimport Grid from '@material-ui/core/Grid';\n\n// Styles\nimport { navBar } from '../styles/navBar';\n\ntype Props = {\n  clickButton: () => void;\n};\n\nconst NavBar: React.FC<Props> = ({ clickButton }: Props) => {\n  const classes = navBar();\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Grid container>\n          <Grid item xs={9} className={classes.onRight}>\n            <h2>Email Subscription Database</h2>\n          </Grid>\n          <Grid item xs={3} className={classes.onLeft}>\n            <Button\n              onClick={clickButton}\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              startIcon={<SaveIcon />}\n            >\n              Save CSV\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    </>\n  );\n};\n\nexport default NavBar;\n","import { makeStyles } from '@material-ui/core/styles';\n\nexport const tablePagination = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(5),\n  },\n}));\n","import React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\n\nimport { TablePaginationProps } from '@material-ui/core/TablePagination';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\n\n// Styles\nimport { tablePagination } from '../styles/tablePagination';\n\nconst PaginationActions: React.FC<TablePaginationProps> = ({\n  count,\n  onChangePage,\n  page,\n  rowsPerPage,\n}: TablePaginationProps) => {\n  const classes = tablePagination();\n  const theme = useTheme();\n\n  // Handle first page button click\n  const handleFirstPageButtonClick = (\n    e: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(e, 0);\n  };\n\n  // Handle back page button click\n  const handleBackPageButtonClick = (\n    e: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(e, page - 1);\n  };\n\n  // Handle next page button click\n  const handleNextPageButtonClick = (\n    e: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(e, page + 1);\n  };\n\n  // Handle next page button click\n  const handleLastPageButtonClick = (\n    e: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(e, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <>\n      <div className={classes.root}>\n        <IconButton\n          onClick={handleFirstPageButtonClick}\n          disabled={page === 0}\n          aria-label=\"First page\"\n        >\n          {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n        </IconButton>\n        <IconButton\n          onClick={handleBackPageButtonClick}\n          disabled={page === 0}\n          aria-label=\"Previous page\"\n        >\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowRight />\n          ) : (\n            <KeyboardArrowLeft />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleNextPageButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"Last page\"\n        >\n          {theme.direction === 'rtl' ? (\n            <KeyboardArrowLeft />\n          ) : (\n            <KeyboardArrowRight />\n          )}\n        </IconButton>\n        <IconButton\n          onClick={handleLastPageButtonClick}\n          disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n          aria-label=\"Last page\"\n        >\n          {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n        </IconButton>\n      </div>\n    </>\n  );\n};\n\nexport default PaginationActions;\n","import axios from 'axios';\n\nimport { CustomerData } from '../interfaces/CustomerData';\n\nconst baseUrl = '/db/customers';\n\n// Get all data from backend\nconst getAll = async (): Promise<CustomerData[]> => {\n  const req = await axios.get(baseUrl);\n  return req.data;\n};\n\nexport default { getAll };\n","import { CustomerData } from '../interfaces/CustomerData';\n\nexport const saveCsv = (rows: CustomerData[]): string => {\n  let csvContent = '';\n\n  const headers =\n    'timestamp;email;utm_source;utm_medium;utm_term;utm_campaign;utm_content\\n';\n\n  csvContent += headers;\n\n  csvContent += rows\n    .map((row) => {\n      let rowStr = '';\n\n      rowStr += row.timestamp;\n      rowStr += ';';\n      rowStr += row.email.toString();\n      rowStr += ';';\n      rowStr += row.utm_source.toString();\n      rowStr += ';';\n      rowStr += row.utm_medium.toString();\n      rowStr += ';';\n      rowStr += row.utm_term.toString();\n      rowStr += ';';\n      rowStr += row.utm_campaign.toString();\n      rowStr += ';';\n      rowStr += row.utm_content.toString();\n\n      return rowStr;\n    })\n    .join('\\n');\n\n  return csvContent;\n};\n","import { makeStyles, withStyles } from '@material-ui/core/styles';\nimport TableRow from '@material-ui/core/TableRow';\n\nexport const tableStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  container: {\n    margin: '0 1vw',\n  },\n  table: {\n    minWidth: 650,\n  },\n  headerContainer: {\n    backgroundColor: theme.palette.info.main,\n  },\n  header: {\n    fontWeight: 'bold',\n    color: theme.palette.common.white,\n  },\n}));\n\nexport const StyledTableRow = withStyles((theme) => ({\n  root: {\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n","import React, { useState, useEffect } from 'react';\n\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableFooter from '@material-ui/core/TableFooter';\n\n// Components\nimport NavBar from './components/NavBar';\nimport PaginationActions from './components/PaginationActions';\n\n// Interfaces\nimport { CustomerData } from './interfaces/CustomerData';\n\n// Services\nimport apiService from './services/apiService';\n\n// Utils\nimport { saveCsv } from './utils/saveCsv';\n\n// Styles\nimport { tableStyles, StyledTableRow } from './styles/tableStyles';\n\nconst App: React.FC = () => {\n  const classes = tableStyles();\n  const [rows, setRows] = useState<CustomerData[]>([]);\n  const [page, setPage] = useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = useState<number>(8);\n\n  const emptyRows =\n    rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  // Use Effect\n  useEffect(() => {\n    apiService.getAll().then((data: CustomerData[]) => {\n      setRows(data);\n    });\n  }, []);\n\n  // Handle save file csv\n  const handleSaveFile = () => {\n    const element = document.createElement('a');\n    const file = new Blob([saveCsv(rows)], {\n      type: 'text/csv;charset=UTF-8',\n    });\n\n    element.href = window.URL.createObjectURL(file);\n    element.download = 'email-subscription-list.csv';\n    document.body.appendChild(element);\n    element.click();\n  };\n\n  // Handle change page\n  const handleChangePage = (\n    _e: React.MouseEvent<HTMLButtonElement> | null,\n    page: number\n  ) => {\n    setPage(page);\n  };\n\n  // Handle change rows per pages\n  const handleChangeRowsPerPage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(Number(e.target.value));\n    setPage(0);\n  };\n\n  return (\n    <>\n      <NavBar clickButton={handleSaveFile} />\n      <div className={classes.root}>\n        <TableContainer component={Paper} className={classes.container}>\n          <Table className={classes.table}>\n            <TableHead className={classes.headerContainer}>\n              <TableRow>\n                <TableCell className={classes.header}>Time Stamp</TableCell>\n                <TableCell className={classes.header} align=\"right\">\n                  Email\n                </TableCell>\n                <TableCell className={classes.header} align=\"right\">\n                  UTM Source\n                </TableCell>\n                <TableCell className={classes.header} align=\"right\">\n                  UTM Medium\n                </TableCell>\n                <TableCell className={classes.header} align=\"right\">\n                  UTM Term\n                </TableCell>\n                <TableCell className={classes.header} align=\"right\">\n                  UTM Campaign\n                </TableCell>\n                <TableCell className={classes.header} align=\"right\">\n                  UTM Content\n                </TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {(rowsPerPage > 0\n                ? rows.slice(\n                    page * rowsPerPage,\n                    page * rowsPerPage + rowsPerPage\n                  )\n                : rows\n              ).map((row, id) => (\n                <StyledTableRow key={id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.timestamp}\n                  </TableCell>\n                  <TableCell align=\"right\">{row.email}</TableCell>\n                  <TableCell align=\"right\">{row.utm_source}</TableCell>\n                  <TableCell align=\"right\">{row.utm_medium}</TableCell>\n                  <TableCell align=\"right\">{row.utm_term}</TableCell>\n                  <TableCell align=\"right\">{row.utm_campaign}</TableCell>\n                  <TableCell align=\"right\">{row.utm_content}</TableCell>\n                </StyledTableRow>\n              ))}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n            <TableFooter>\n              <TableRow>\n                <TablePagination\n                  rowsPerPageOptions={[5, 8, 12, { label: 'All', value: -1 }]}\n                  colSpan={3}\n                  count={rows.length}\n                  rowsPerPage={rowsPerPage}\n                  page={page}\n                  SelectProps={{\n                    inputProps: { 'aria-label': 'rows per page' },\n                    native: true,\n                  }}\n                  onChangePage={handleChangePage}\n                  onChangeRowsPerPage={handleChangeRowsPerPage}\n                  ActionsComponent={PaginationActions}\n                />\n              </TableRow>\n            </TableFooter>\n          </Table>\n        </TableContainer>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}